#if _PCL_
namespace Irony
{
    public class Resources
    {
        public static string ConsoleNoChars => "Nn";
        public static string ConsoleYesChars => "Yy";
        public static string ErrAmbigGrammarRR => "Ambiguous grammar, unresolvable reduce-reduce conflicts. State {0}, lookaheads [{1}]";
        public static string ErrAmbigGrammarSR => "Ambiguous grammar, unresolvable shift-reduce conflicts. State {0}, lookaheads [{1}]";
        public static string ErrArgListNotFound => "Argument list not found in the stack. Expected: ValueList, found: {0}.";
        public static string ErrAssignLiteralValue => "Invalid operation, attempt to assign to a constant or literal value.";
        public static string ErrBadChar => "Invalid length of char literal - should be a single character.";
        public static string ErrBadStrLiteral => "Mal-formed  string literal - cannot find termination symbol.";
        public static string ErrBadUnEscape => "Invalid unicode escape ({0}), expected {1} hex digits.";
        public static string ErrBadXEscape => @"Invalid \x escape, at least one digit expected.";
        public static string ErrCannotConvertValue => "Cannot convert value from type {0} to type {1}, type converter not defined.";
        public static string ErrCannotConvertValueToType => "Cannot convert literal {0} to type {1}.";
        public static string ErrCannotMoveBackInSource => "Fatal error in parser: attempt to move back in the source.";
        public static string ErrConflictMsgTemplate => "{0} State {1} on inputs: {2}";
        public static string ErrConsoleFatalError => "Fatal error:";
        public static string ErrConstructNotSupported => "Construct '{0}' is not supported (yet) by language implementation.";
        public static string ErrDsvNoClosingQuote => "Could not find a closing quote for quoted value.";
        public static string ErrDupRegexSwitch => "Duplicate switch '{0}' for regular expression.";
        public static string ErrDupStartSymbolStr => "Duplicate start symbol {0} in string literal [{1}].";
        public static string ErrFailedCreateNode => "Failed to create AST node for non-terminal [{0}], error: {1}";
        public static string ErrFreeTextNoEndTag => "Failed to find the ending tag '{0}' for a text literal. ";
        public static string ErrImpliedOpUseParserLink => "ImpliedSymbolTerminal cannot be used in grammar with DisableScannerParserLink flag set";
        public static string ErrInternalErrDataPopFailed => "Interpreter error, DataStack.Pop() operation failed - stack is empty.";
        public static string ErrInterpreterIsBusy => "Interpreter is busy.";
        public static string ErrInvalidArgsForIncDec => "Invalid arguments for IncDecNode AST node: either first or second argument should be '--' or '++'.";
        public static string ErrInvalidAstMode => "Invalid AstMode value in call to Evaluate method. Node: {0}, mode: {1}.";
        public static string ErrInvalidChar => "Invalid character: '{0}'.";
        public static string ErrInvalidEmbeddedPrefix => "Invalid embedded expression. ";
        public static string ErrInvDedent => "Invalid dedent level, no previous matching indent found.";
        public static string ErrInvEscape => @"Invalid escape sequence: \{0}.";
        public static string ErrInvEscSeq => "Invalid escape sequence.";
        public static string ErrInvEscSymbol => "Invalid escape symbol, expected 'u' or 'U' only.";
        public static string ErrInvNumber => "Invalid number.";
        public static string ErrInvRegexSwitch => "Invalid switch '{0}' for regular expression";
        public static string ErrInvStrDef => "Error in string literal [{0}]: No start/end symbols specified.";
        public static string ErrLastTermOfErrorProd => "The last term of production containing SyntaxError must be a terminal. NonTerminal: {0}";
        public static string ErrListCannotBeTransient => "List non-terminals cannot be marked transient; list: ({0})";
        public static string ErrNewLineExpected => "Expected new line symbol.";
        public static string ErrNoClosingBrace => "No closing pair for opening symbol {0}";
        public static string ErrNodeTypeNotSetOn => "AstNodeType or AstNodeCreator is not set on non-terminals: {0}. Either set Term.AstConfig.NodeType, or provide default values in AstContext.";
        public static string ErrNoEndForRegex => "No end symbol for regex literal.";
        public static string ErrNoEndTagInEmbExpr => "No ending tag '{0}' found in embedded expression.";
        public static string ErrNoImplForUnaryOp => "UnExprNode: no implementation for unary operator '{0}'.";
        public static string ErrNoLetterAfterNum => "Number cannot be followed by a letter.";
        public static string ErrNoLkhds => "ParserDataBuilder error: inadequate state {0}, reduce item '{1}' has no lookaheads.";
        public static string ErrNtRuleIsNull => "Non-terminal {0} has uninitialized Rule property.";
                public static string ErrNullNodeEval => "Attempt to evaluate NULL AST node. The AST node for term '{0}' was not created during parsing.";
        public static string ErrOpNotDefinedForType => "Operator '{0}' is not defined for types {1}.";
        public static string ErrOpNotDefinedForTypes => "Operator '{0}' is not defined for types {1} and {2}.";
        public static string ErrOpNotImplemented => "Operator '{0} not imlemented.";
        public static string ErrOutErrorPrintFormat => "{0}: {1}";
        public static string ErrOutlineFilterContSymbol => "CodeOutlineFilter: line continuation symbol '{0}' should be added to Grammar.NonGrammarTerminals list.";
        public static string ErrParserUnexpectedInput => "Syntax error, unexpected input.";
        public static string ErrParseTreeNull => "Parsed tree is null, cannot evaluate.";
        public static string ErrParseTreeRootNull => "Parse tree root is null, cannot evaluate.";
        public static string ErrRootAstNodeNull => "Root AST node is null, cannot evaluate.";
        public static string ErrRootAstNoInterface => "Root AST node does not implement IInterpretedAstNode interface, cannot evaluate.";
        public static string ErrRootNotRegistered => "({0}) term passed as 'root' paramater to parserr is not Root or snippet root of the grammar. Add it to SnippetRoots set in grammar constructor.";
        public static string ErrRootNotSet => "Root property of the grammar is not set.";
        public static string ErrRRConflict => "Reduce-reduce conflict. State {0}, lookaheads: {1}. Selected reduce on first production in conflict set.";
        public static string ErrRuleContainsNull => "Rule for NonTerminal {0} contains null as an operand in position {1} in one of productions.";
        public static string ErrSRConflict => "Shift-reduce conflict. State {0}, lookaheads [{1}]. Selected shift as preferred action.";
        public static string ErrSyntaxErrorExpected => "Syntax error, expected: {0}";
        public static string ErrSyntaxErrorNoInfo => "Syntax error.";
        public static string ErrTemplExprNotRoot => "Expression root non-terminal in template settings (AstNodeConfig property) in templated string literal [{0}] is not added to Roots set. Add it to SnippetRoots in grammar constructor.";
        public static string ErrTemplMissingExprRoot => "Expression root is not specified in template settings (AstNodeConfig property) in templated string literal [{0}]. ";
        public static string ErrTemplNoSettings => "Error in string literal [{0}]: IsTemplate flag is set, but TemplateSettings is not provided in AstNodeConfig property.";
        public static string ErrTerminalHasEmptyPrefix => "A terminal {0} has empty prefix.";
        public static string ErrTransientNtMustHaveOneTerm => "Transient non-terminal must have zero or one non-punctuation child nodes; non-terminals: {0}.";
        public static string ErrUnclosedComment => "Unclosed comment block";
        public static string ErrUnexpEof => "Unexpected end of file.";
        public static string ErrUnexpIndent => "Unexpected indentation.";
        public static string ErrUnmatchedCloseBrace => "Unmatched closing brace '{0}'.";
        public static string ErrVarIsNotCallable => "Variable {0} is not a callable function.";
        public static string ErrVarNotDefined => "Variable {0} not defined.";
        public static string ErrWrongArgCount => "Invalid number of arguments. Expected {0}, found {1}.";
        public static string FmtRowCol => "({0}:{1})";
        public static string LabelActionAccept => "Accept";
        public static string LabelActionOp => "Operator, shift to {0}/reduce on {1}.";
        public static string LabelActionReduce => "Reduce on {0}";
        public static string LabelActionShift => "Shift to {0}";
        public static string LabelActionUnknown => "(Unknown action type)";
        public static string LabelEofMark => "(EOF)";
        public static string LabelEosLabel => "[end-of-statement]";
        public static string LabelInitialState => "(INITIAL STATE)";
        public static string LabelKeySymbol => "(Key symbol)";
        public static string LabelKeyword => "(Keyword)";
        public static string LabelLineBreak => "[line break]";
        public static string LabelLocation => "Location:";
        public static string LabelNone => "None";
        public static string LabelSrcHaveMore => "...";
        public static string LabelUnnamed => "(unnamed)";
        public static string MsgAbortScriptYN => "Abort script(y/n)?";
        public static string MsgDefaultConsoleGreeting => "{0} Console.\r\nPress Ctrl-C to exit the program.\r\n";
        public static string MsgDefaultConsoleTitle => "Console";
        public static string MsgErrorCustomActionDidNotAdvance => "Custom action did not execute: parser state or input did not change.";
        public static string MsgExitConsoleYN => "Exit console (y/n)?";
        public static string MsgNLALRAdvice => "NLALR transform: Add WrapTail() in '.' position to [{0}].";
        public static string MsgPressAnyKeyToExit => "Press any key to end the program.";
        public static string MsgSrcPosToString => "\"[{0}], at {1}";
        public static string MsgTraceConflictResolved => "Parsing conflict resolved in code.";
        public static string MsgTraceExecCustomAction => "Executing custom action";
        public static string MsgTraceOpResolved => "Operator - resolved to {0}";
        public static string MsgTracePoppedState => "Popped state from stack, pushing {0}";
        public static string MsgTraceRecoverAction => "RECOVERING: {0}";
        public static string MsgTraceRecoverFailed => "FAILED TO RECOVER";
        public static string MsgTraceRecoverFoundState => "RECOVERING: Found state with shift on error : {0}";
        public static string MsgTraceRecovering => "RECOVERING: popping stack, looking for state with error shift";
        public static string MsgTraceRecoverReducing => "RECOVERING: Reached end of error production, reducing.";
        public static string MsgTraceRecoverShiftError => "RECOVERING: Shifting Error term, {0}";
        public static string MsgTraceRecoverShiftTillEnd => "RECOVERING: shifting until the end of error production.";
        public static string MsgTraceRecoverSuccess => "RECOVERED";
    }
}
#endif